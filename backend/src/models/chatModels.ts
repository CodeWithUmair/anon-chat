import mongoose, { Document, Schema } from 'mongoose';

export interface IMessage extends Document {
    id?: string; // optional because it's now autogenerated if not provided
    userId: string;
    userName: string;
    userAvatar: string;
    content: string;
    chatId: string;
    timestamp: Date;
}

const messageSchema = new Schema<IMessage>({
    id: {
        type: String,
        unique: true,
        default: () =>
            `${Date.now().toString(36)}-${Math.random().toString(36).slice(2, 8)}`, // random + timestamp combo
    },
    userId: { type: String, required: true },
    userName: { type: String, required: true },
    userAvatar: { type: String, required: true },
    content: { type: String, required: true },
    chatId: { type: String, required: true },
    timestamp: { type: Date, default: Date.now },
});

// Optional: If you want to prevent duplicates on content+timestamp+chatId combo, you can define a compound index
// messageSchema.index({ content: 1, chatId: 1, timestamp: 1 }, { unique: true });

export default mongoose.model<IMessage>('Message', messageSchema);
